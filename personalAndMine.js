const colors = require('colors');
const WebSocket = require('ws');
const fs = require('fs');
const path = require('path');
const axios = require('axios');
const { DateTime } = require('luxon');
const { encryptMessage, decryptMessage, setSessionKeys } = require('./encryption.js');
// ====== H√†m ph·ª• tr·ª£ ======
function prettyBox(title, lines, color = 'cyan') {
    const width = Math.max(title.length, ...lines.map(l => l.replace(/\x1b\[[0-9;]*m/g, '').length)) + 4;
    const top = `‚îå${'‚îÄ'.repeat(width-2)}‚îê`;
    const mid = `‚îÇ ${title.padEnd(width-4)} ‚îÇ`;
    const sep = `‚îú${'‚îÄ'.repeat(width-2)}‚î§`;
    const content = lines.map(l => `‚îÇ ${l.padEnd(width-4)} ‚îÇ`).join('\n');
    const bot = `‚îî${'‚îÄ'.repeat(width-2)}‚îò`;
    let box = [top, mid, sep, content, bot].join('\n');
    if (colors[color]) box = colors[color](box);
    return box;
}

function cleanupAndExit(code = 0) {
    console.log(colors.yellow('\nƒêang tho√°t...'));
    process.exit(code);
}

function getCookieFromFile() {
    try {
        const cookieFile = path.join(__dirname, 'cookie1.txt');
        if (fs.existsSync(cookieFile)) {
            const cookie = fs.readFileSync(cookieFile, 'utf8').split(/\r?\n/)[0].trim();
            if (cookie && !cookie.startsWith('#')) {
                console.log('‚úÖ ƒê√£ l·∫•y cookie t·ª´ file cookie.txt!');
                return cookie;
            }
        }
        return null;
    } catch (error) {
        console.log('‚ùå L·ªói khi ƒë·ªçc file cookie.txt:', error.message);
        return null;
    }
}

// ====== H√†m lo·∫°i b·ªè th·∫ª HTML ======
function stripHtmlTags(str) {
    if (!str || typeof str !== 'string') return str;
    return str.replace(/<[^>]+>/g, '');
}



// ====== ƒê·ªãnh nghƒ©a class MongTuTienAPIClient ======
class MongTuTienAPIClient {
    constructor() {
        this.baseHeaders = {
            "Accept": "application/json",
            "Accept-Encoding": "gzip, deflate",
            "Accept-Language": "vi,en;q=0.9,en-GB;q=0.8,en-US;q=0.7",
            "Content-Type": "application/json",
            "Origin": "https://mongtutien.online",
            "Referer": "https://mongtutien.online/",
            "Sec-Ch-Ua": '"Not)A;Brand";v="8", "Chromium";v="138", "Microsoft Edge";v="138"',
            "Sec-Ch-Ua-Mobile": "?0",
            "Sec-Ch-Ua-Platform": '"Windows"',
            "Sec-Fetch-Dest": "empty",
            "Sec-Fetch-Mode": "cors",
            "Sec-Fetch-Site": "same-origin",
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0"
        };
        this.selectedMapKey = null;
        this.errorCount = 0;
    }

    log(msg, type = 'info') {
        const timestamp = new Date().toLocaleTimeString();
        switch(type) {
            case 'success':
                console.log(`[${timestamp}] [‚úì] ${msg}`.green);
                break;
            case 'custom':
                console.log(`[${timestamp}] [*] ${msg}`.magenta);
                break;
            case 'error':
                console.log(`[${timestamp}] [‚úó] ${msg}`.red);
                break;
            case 'warning':
                console.log(`[${timestamp}] [!] ${msg}`.yellow);
                break;
            default:
                console.log(`[${timestamp}] [‚Ñπ] ${msg}`.blue);
        }
    }

    async getCharacterInfo(cookie) {
        const url = "https://mongtutien.online/api/character/me";
        try {
            const headers = {
                ...this.baseHeaders,
                "Cookie": `nuxt-session=${cookie}`
            };
            const response = await axios.get(url, { headers, responseType: 'json' });
            if (response.status === 200) {
                const { character } = response.data;
                return {
                    name: character.name,
                    level: character.level,
                    location: character.location,
                    gold: character.gold,
                    spiritStone: character.spiritStone,
                    exp: character.exp,
                    nextExp: character.nextRealm.exp
                };
            } else {
                this.log(`Kh√¥ng th·ªÉ l·∫•y th√¥ng tin nh√¢n v·∫≠t: Status ${response.status}`, 'error');
                return null;
            }
        } catch (error) {
            if (error.response && error.response.status === 401) {
                this.errorCount++;
                if (this.errorCount > 3) {
                    this.log('L·ªói x√°c th·ª±c qu√° nhi·ªÅu l·∫ßn, d·ª´ng auto b√≠ c·∫£nh.', 'error');
                    return null;
                }
                this.log('L·ªói x√°c th·ª±c, ƒëang l·∫•y l·∫°i cookie...', 'warning');
                // N·∫øu b·∫°n c√≥ h√†m getCookieAutoShared th√¨ g·ªçi ·ªü ƒë√¢y, n·∫øu kh√¥ng th√¨ b·ªè qua
                // const newCookie = await getCookieAutoShared();
                // if (newCookie) {
                //     cookie = newCookie;
                //     this.errorCount = 0;
                //     this.log('ƒê√£ l·∫•y l·∫°i cookie m·ªõi, ti·∫øp t·ª•c...', 'success');
                //     return await this.getCharacterInfo(cookie);
                // } else {
                //     this.log('Kh√¥ng l·∫•y l·∫°i ƒë∆∞·ª£c cookie m·ªõi.', 'error');
                //     return null;
                // }
                return null;
            }
            this.log(`L·ªói khi l·∫•y th√¥ng tin nh√¢n v·∫≠t: ${error.message}`, 'error');
            return null;
        }
    }


    getCookieFromFile() {
        try {
            const cookieFile = path.join(__dirname, 'cookie.txt');
            if (fs.existsSync(cookieFile)) {
                const cookie = fs.readFileSync(cookieFile, 'utf8').split(/\r?\n/)[0].trim();
                if (cookie && !cookie.startsWith('#')) {
                    console.log('‚úÖ ƒê√£ l·∫•y cookie t·ª´ file cookie.txt!');
                    return cookie;
                }
            }
            console.log('‚ùå Kh√¥ng t√¨m th·∫•y cookie trong file cookie.txt');
            return null;
        } catch (error) {
            console.log('‚ùå L·ªói khi ƒë·ªçc file cookie.txt:', error.message);
            return null;
        }
    }

    async getCookieAuto() {
        console.log('üîÑ ƒêang l·∫•y cookie t·ª± ƒë·ªông...');
        let cookie = this.getCookieFromFile();
        if (cookie) return cookie.trim();
        // N·∫øu kh√¥ng c√≥, y√™u c·∫ßu nh·∫≠p th·ªß c√¥ng
        console.log('‚ùå Kh√¥ng th·ªÉ l·∫•y cookie t·ª± ƒë·ªông. Vui l√≤ng nh·∫≠p th·ªß c√¥ng.');
        return null;
    }
}


class PersonalBossAutoHunter {
    constructor(cookie, logFn = console.log) {
        this.cookie = cookie;
        // S·ª≠ d·ª•ng logFn m·ªõi cho log ƒë·∫πp
        this.log = (msg, type = 'info') => {
            const now = new Date();
            const time = now.toLocaleTimeString();
            let icon = '‚ÑπÔ∏è';
            let color = 'magenta';
            if (type === 'success') { icon = 'üü¢'; color = 'green'; }
            else if (type === 'warning') { icon = 'üü°'; color = 'yellow'; }
            else if (type === 'error') { icon = 'üî¥'; color = 'red'; }
            else if (type === 'custom') { icon = '‚ú®'; color = 'cyan'; }
            else if (type === 'attack') { icon = '‚öîÔ∏è'; color = 'blue'; }
            else if (type === 'reward') { icon = 'üèÜ'; color = 'yellow'; }
            else if (type === 'boss') { icon = 'üë§'; color = 'magenta'; }
            let line = `[${time}] ${icon} ${msg}`;
            if (colors[color]) line = colors[color](line);
            logFn(line);
        };
        this.ws = null;
        this.heartbeatInterval = null;
        this.pingInterval = null;
        this.bossQueue = [];
        this.bossList = [];
        this.defeatedBossIds = new Set();
        this.isAttacking = false;
        this.isRunning = false;
        this.userId = null;
        this.lastLoggedDamageId = null;
        this.hasSessionKey = false;
        this.reconnectTimeout = null;
        // ƒê√É B·ªé this.pendingClaimMines
        this.errorCount = 0;
    }
    connect() {
        return new Promise((resolve, reject) => {
            const wsUrl = 'wss://mongtutien.online/ws';
            this.ws = new WebSocket(wsUrl, {
                headers: {
                    'Cookie': `nuxt-session=${this.cookie}`
                }
            });
            this.ws.on('open', () => {
                this.log('[PersonalBoss] ƒê√£ k·∫øt n·ªëi WebSocket boss c√° nh√¢n!');
                if (this.reconnectTimeout) {
                    clearTimeout(this.reconnectTimeout);
                    this.reconnectTimeout = null;
                }
                // Kh√¥ng g·ª≠i g√¨ c·∫£, ch·ªâ ch·ªù nh·∫≠n sessionKey
                resolve();
            });
            this.ws.on('close', (code, reason) => {
                this.log(`[PersonalBoss] M·∫•t k·∫øt n·ªëi WebSocket boss c√° nh√¢n! Tool s·∫Ω t·ª± ƒë·ªông t·∫Øt ho√†n to√†n.`, 'error');
                if (this.heartbeatInterval) clearInterval(this.heartbeatInterval);
                if (this.reconnectTimeout) clearTimeout(this.reconnectTimeout);
                process.exit(1); // Tho√°t ho√†n to√†n, kh√¥ng restart
            });
            this.ws.on('error', (err) => {
                this.log(`[PersonalBoss] L·ªói WebSocket boss c√° nh√¢n: ${err.message}. Tool s·∫Ω t·ª± ƒë·ªông t·∫Øt ho√†n to√†n.`, 'error');
                if (this.heartbeatInterval) clearInterval(this.heartbeatInterval);
                if (this.reconnectTimeout) clearTimeout(this.reconnectTimeout);
                process.exit(1); // Tho√°t ho√†n to√†n, kh√¥ng restart
            });
            this.ws.on('message', (msg) => {
                this.handleMessage(msg);
            });
        });
    }
    safeSend(type, payload = {}) {
        if (!this.hasSessionKey) {
            this.log('[PersonalBoss] Ch∆∞a c√≥ sessionKey, b·ªè qua g·ª≠i l·ªánh');
            return;
        }
        try {
            const packet = encryptMessage({ type, payload });
            this.send(packet);
        } catch (err) {
            this.log(`[PersonalBoss] L·ªói m√£ h√≥a: ${err.message}`, 'error');
            this.hasSessionKey = false;
        }
    }
    send(packet) {
        if (this.ws && this.ws.readyState === WebSocket.OPEN) {
            this.ws.send(packet);
        } else {
            this.log('[PersonalBoss] WebSocket kh√¥ng m·ªü', 'error');
        }
    }
    async start() {
        this.isRunning = true;
        await this.connect();
        setTimeout(() => {
            if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
                this.log(`[PersonalBoss] WebSocket kh√¥ng k·∫øt n·ªëi sau 30s, tho√°t tool...`, 'error');
                cleanupAndExit(1, 3000);
            } else {
                this.log(`[PersonalBoss] WebSocket k·∫øt n·ªëi ·ªïn ƒë·ªãnh`, 'success');
            }
        }, 30000);
    }
    stop() {
        this.isRunning = false;
        if (this.ws) this.ws.close();
    }
    handleMessage(msg) {
        let data = msg;
        if (Buffer.isBuffer(msg)) {
            try {
                const str = msg.toString('utf8');
                data = JSON.parse(str);
            } catch (e) { return; }
        } else if (typeof msg === 'string') {
            try { data = JSON.parse(msg); } catch (e) { return; }
        }
        // X·ª≠ l√Ω nh·∫≠n sessionKey
        if (data.type === 'sessionKey' && data.payload) {
            setSessionKeys(data.payload);
            this.hasSessionKey = true;
            this.log('ƒê√£ nh·∫≠n sessionKey v√† thi·∫øt l·∫≠p m√£ h√≥a!', 'success');
            // G·ª≠i l·ªánh l·∫•y danh s√°ch boss c√° nh√¢n ngay sau khi nh·∫≠n sessionKey
                this.safeSend('personal:boss:list');
            this.log('[SEND] G·ª≠i l·ªánh l·∫•y danh s√°ch boss c√° nh√¢n...', 'info');
            // ƒê·∫∑t interval g·ª≠i l·∫°i l·ªánh l·∫•y danh s√°ch boss c√° nh√¢n m·ªói 60s
            if (this.listInterval) clearInterval(this.listInterval);
            this.listInterval = setInterval(() => {
                this.safeSend('personal:boss:list');
                this.log('[SEND] G·ª≠i l·ªánh l·∫•y danh s√°ch boss c√° nh√¢n...', 'info');
            }, 60000);
            return;
        }
        // L·∫•y userId t·ª´ online:players (KH√îNG c·∫ßn ki·ªÉm tra myName)
        if (data.type === 'online:players' && Array.isArray(data.payload)) {
            if (!this.userId && data.payload.length > 0) {
                this.userId = data.payload[0].userId;
                this.log(`[AUTO] ƒê√£ l·∫•y userId c·ªßa b·∫°n: ${this.userId}`, 'success');
            }
            return;
        }
        // Khi nh·∫≠n danh s√°ch boss c√° nh√¢n
        if (data.type === 'personal:boss:list' && Array.isArray(data.payload)) {
            this.log(`[RECV] ƒê√£ nh·∫≠n danh s√°ch boss c√° nh√¢n (${data.payload.length} boss).`, 'info');
            this.bossList = data.payload;
            const now = Date.now();
            let readyCount = 0;
            for (const boss of this.bossList) {
                let status = '';
                if (!boss.spawnedAt || (boss.spawnedAt && new Date(boss.spawnedAt).getTime() <= now)) {
                    if (boss.currentHp > 0) {
                        status = 'C√≥ th·ªÉ t·∫•n c√¥ng';
                        readyCount++;
                    } else {
                        status = 'ƒê√£ ch·∫øt';
                    }
                } else {
                    const ms = new Date(boss.spawnedAt).getTime() - now;
                    const min = Math.floor(ms / 60000);
                    const sec = Math.floor((ms % 60000) / 1000);
                    status = `H·ªìi sinh sau ${min} ph√∫t ${sec.toString().padStart(2, '0')} gi√¢y`;
                }
                this.log(`Boss: ${boss.name} | HP: ${boss.currentHp.toLocaleString()} / ${boss.maxHp.toLocaleString()} | ${status}`,'info');
            }
            // L·ªçc boss ƒë√£ h·ªìi sinh v√† ch∆∞a ch·∫øt
            this.attackQueue = this.bossList.filter(boss => {
                const timeLeft = boss.spawnedAt ? Math.max(0, new Date(boss.spawnedAt).getTime() - now) : 0;
                return (!boss.spawnedAt || timeLeft <= 0) && boss.currentHp > 0;
            });
            if (this.attackQueue.length > 0 && !this.isAttacking) {
                this.attackNextBoss();
            } else if (this.attackQueue.length === 0) {
                this.log('Kh√¥ng c√≥ boss c√° nh√¢n n√†o s·∫µn s√†ng ƒë·ªÉ ƒë√°nh. Ch·ªù boss m·ªõi h·ªìi sinh...', 'info');
            }
            return;
        }
        // Khi nh·∫≠n th√¥ng b√°o nh·∫≠n th∆∞·ªüng t·ª´ boss c√° nh√¢n (system message)
        if (data.type === 'system' && data.payload && typeof data.payload.text === 'string' && data.payload.text.includes('üéÅ T·ª´')) {
            this.log(`[TH∆Ø·ªûNG] ${data.payload.text}`, 'reward');
        }
        // X·ª≠ l√Ω c·∫£nh b√°o ho·∫∑c l·ªói n·∫øu c·∫ßn
        if (data.type === 'warn' && data.payload && typeof data.payload.text === 'string') {
            this.log(`‚ö†Ô∏è ${data.payload.text}`, 'warning');
        }
        if (data.error && typeof data.error === 'string') {
            this.log(`L·ªói: ${data.error}`, 'error');
        }
    }
    attackNextBoss() {
        if (this.isAttacking || !this.attackQueue || this.attackQueue.length === 0) {
                this.isAttacking = false;
            return;
        }
        this.isAttacking = true;
        const boss = this.attackQueue.shift();
        if (!boss) {
            this.isAttacking = false;
            return;
        }
        this.log(`[SEND] G·ª≠i l·ªánh t·∫•n c√¥ng boss c√° nh√¢n: ${boss.name} (ID: ${boss.id})`,'attack');
        this.safeSend('personal:boss:attack', { bossId: boss.id });
        setTimeout(() => {
            this.isAttacking = false;
            this.attackNextBoss();
        }, 5000);
    }
}

async function mainPersonalBossAuto() {
    const apiClient = new MongTuTienAPIClient();
    let cookie = await apiClient.getCookieAuto();
    
    if (!cookie) {
        const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
        cookie = await new Promise(resolve => {
            rl.question('Nh·∫≠p cookie (nuxt-session): ', (input) => {
                rl.close();
                resolve(input.trim());
            });
        });
    }
    
    const client = new PersonalBossAutoHunter(cookie.trim(), (msg, type) => {
        if (type === 'success') console.log(msg.green);
        else if (type === 'warning') console.log(msg.yellow);
        else if (type === 'error') console.log(msg.red);
        else console.log(msg.cyan);
    });
    global.personalBossHunter = client; // L∆∞u reference ƒë·ªÉ cleanup
    await client.start();
    // D·ª´ng l·∫°i b·∫±ng Ctrl+C
}
class PersonalPetBossAutoHunter {
    constructor(cookie, logFn = console.log) {
        this.cookie = cookie;
        this.log = (msg, type = 'info') => {
            const now = new Date();
            const time = now.toLocaleTimeString();
            let icon = 'üêæ';
            let color = 'cyan';
            if (type === 'success') { icon = 'üü¢'; color = 'green'; }
            else if (type === 'warning') { icon = 'üü°'; color = 'yellow'; }
            else if (type === 'error') { icon = 'üî¥'; color = 'red'; }
            else if (type === 'attack') { icon = '‚öîÔ∏è'; color = 'blue'; }
            else if (type === 'reward') { icon = 'üèÜ'; color = 'yellow'; }
            let line = `[${time}] ${icon} ${msg}`;
            if (colors[color]) line = colors[color](line);
            logFn(line);
        };
        this.ws = null;
        this.hasSessionKey = false;
        this.bossList = [];
        this.isAttacking = false;
        this.attackQueue = [];
        this.userId = null;
        this.myName = null;
        this.apiClient = new MongTuTienAPIClient();
        this.listInterval = null;
    }
    async ensureCharacterName() {
        if (!this.myName) {
            const charInfo = await this.apiClient.getCharacterInfo(this.cookie);
            if (charInfo && charInfo.name) {
                this.myName = charInfo.name;
                this.log(`[AUTO] ƒê√£ l·∫•y t√™n nh√¢n v·∫≠t t·ª´ API: ${this.myName}`, 'success');
            } else {
                this.log('Kh√¥ng th·ªÉ l·∫•y t√™n nh√¢n v·∫≠t t·ª´ API!', 'warning');
            }
        }
    }
    connect() {
        return new Promise((resolve, reject) => {
            const wsUrl = 'wss://mongtutien.online/ws';
            this.ws = new WebSocket(wsUrl, {
                headers: {
                    'Cookie': `nuxt-session=${this.cookie}`
                }
            });
            this.ws.on('open', () => {
                this.log('ƒê√£ k·∫øt n·ªëi WebSocket pet boss!', 'success');
                resolve();
            });
            this.ws.on('close', () => {
                this.log('M·∫•t k·∫øt n·ªëi WebSocket pet boss!', 'error');
                process.exit(1);
            });
            this.ws.on('error', (err) => {
                this.log(`L·ªói WebSocket pet boss: ${err.message}`, 'error');
                process.exit(1);
            });
            this.ws.on('message', (msg) => {
                this.handleMessage(msg);
            });
        });
    }
    safeSend(type, payload = {}) {
        if (!this.hasSessionKey) return;
        try {
            if (type === 'personal:pet:boss:list') {
                this.log('[SEND] G·ª≠i l·ªánh l·∫•y danh s√°ch boss pet c√° nh√¢n...', 'info');
            }
            const packet = encryptMessage({ type, payload });
            this.send(packet);
        } catch (err) {
            this.log(`L·ªói m√£ h√≥a: ${err.message}`, 'error');
            this.hasSessionKey = false;
        }
    }
    send(packet) {
        if (this.ws && this.ws.readyState === WebSocket.OPEN) {
            this.ws.send(packet);
        }
    }
    async start() {
        await this.ensureCharacterName();
        await this.connect();
        this.log('ƒêang ch·ªù sessionKey...', 'info');
    }
    stop() {
        if (this.ws) this.ws.close();
        if (this.listInterval) clearInterval(this.listInterval);
    }
    handleMessage(msg) {
        let data = msg;
        if (Buffer.isBuffer(msg)) {
            try {
                const str = msg.toString('utf8');
                data = JSON.parse(str);
            } catch (e) { return; }
        } else if (typeof msg === 'string') {
            try { data = JSON.parse(msg); } catch (e) { return; }
        }
        // Nh·∫≠n sessionKey
        if (data.type === 'sessionKey' && data.payload) {
            setSessionKeys(data.payload);
            this.hasSessionKey = true;
            this.log('ƒê√£ nh·∫≠n sessionKey v√† thi·∫øt l·∫≠p m√£ h√≥a!', 'success');
            // Sau khi nh·∫≠n sessionKey, g·ª≠i l·ªánh l·∫•y danh s√°ch boss pet c√° nh√¢n
            this.safeSend('personal:pet:boss:list');
            this.listInterval = setInterval(() => {
                this.safeSend('personal:pet:boss:list');
            }, 60000);
            return;
        }
        // L·∫•y userId t·ª´ online:players n·∫øu t√™n tr√πng v·ªõi myName
        if (this.myName && data.type === 'online:players' && Array.isArray(data.payload)) {
            const found = data.payload.find(u => (u.name || '').toLowerCase() === this.myName.toLowerCase());
            if (found) {
                this.userId = found.userId;
                this.log(`[AUTO] ƒê√£ l·∫•y userId t·ª´ online:players: ${this.userId} (name: ${this.myName})`, 'success');
            }
            return;
        }
        // Khi nh·∫≠n danh s√°ch boss pet c√° nh√¢n
        if (data.type === 'personal:pet:boss:list' && Array.isArray(data.payload)) {
            this.log(`[RECV] ƒê√£ nh·∫≠n danh s√°ch boss pet c√° nh√¢n (${data.payload.length} boss).`, 'info');
            this.bossList = data.payload;
            const now = Date.now();
            let readyCount = 0;
            for (const boss of this.bossList) {
                let status = '';
                if (!boss.spawnedAt || (boss.spawnedAt && new Date(boss.spawnedAt).getTime() <= now)) {
                    if (boss.currentHp > 0) {
                        status = 'C√≥ th·ªÉ t·∫•n c√¥ng';
                        readyCount++;
                    } else {
                        status = 'ƒê√£ ch·∫øt';
                    }
                } else {
                    const ms = new Date(boss.spawnedAt).getTime() - now;
                    const min = Math.floor(ms / 60000);
                    const sec = Math.floor((ms % 60000) / 1000);
                    status = `H·ªìi sinh sau ${min} ph√∫t ${sec.toString().padStart(2, '0')} gi√¢y`;
                }
                this.log(`Boss: ${boss.name} | HP: ${boss.currentHp.toLocaleString()} / ${boss.maxHp.toLocaleString()} | ${status}`,'info');
            }
            // L·ªçc boss ƒë√£ h·ªìi sinh v√† ch∆∞a ch·∫øt
            this.attackQueue = this.bossList.filter(boss => {
                const timeLeft = boss.spawnedAt ? Math.max(0, new Date(boss.spawnedAt).getTime() - now) : 0;
                return (!boss.spawnedAt || timeLeft <= 0) && boss.currentHp > 0;
            });
            if (this.attackQueue.length > 0 && !this.isAttacking) {
                this.attackNextBoss();
            } else if (this.attackQueue.length === 0) {
                this.log('Kh√¥ng c√≥ boss pet c√° nh√¢n n√†o s·∫µn s√†ng ƒë·ªÉ ƒë√°nh. Ch·ªù boss m·ªõi h·ªìi sinh...', 'info');
            }
        }
        // Khi nh·∫≠n k·∫øt qu·∫£ t·∫•n c√¥ng ho·∫∑c ph·∫ßn th∆∞·ªüng
        if (data.type === 'personal:boss:attack:success') {
            this.log('ƒê√£ t·∫•n c√¥ng boss pet c√° nh√¢n th√†nh c√¥ng!', 'success');
        }
        if (data.type === 'personal:pet:boss:reward' && data.payload) {
            let lines = [];
            lines.push('üèÜ Th∆∞·ªüng:');
            Object.entries(data.payload).forEach(([k, v]) => {
                lines.push(`  - ${k}: ${JSON.stringify(v)}`);
            });
            this.log(prettyBox('K·∫øt th√∫c Boss Pet C√° Nh√¢n', lines, 'green'), 'reward');
        }
        // Khi nh·∫≠n th√¥ng b√°o nh·∫≠n th∆∞·ªüng t·ª´ boss pet c√° nh√¢n (system message)
        if (data.type === 'system' && data.payload && typeof data.payload.text === 'string' && data.payload.text.includes('üéÅ T·ª´')) {
            this.log(`[TH∆Ø·ªûNG] ${data.payload.text}`, 'reward');
        }
        // Khi nh·∫≠n c·∫£nh b√°o ho·∫∑c l·ªói
        if (data.type === 'warn' && data.payload && typeof data.payload.text === 'string') {
            this.log(`‚ö†Ô∏è ${data.payload.text}`, 'warning');
        }
        if (data.error && typeof data.error === 'string') {
            this.log(`L·ªói: ${data.error}`, 'error');
        }
    }
    attackNextBoss() {
        if (this.isAttacking || this.attackQueue.length === 0) {
            this.isAttacking = false;
            return;
        }
        this.isAttacking = true;
        const boss = this.attackQueue.shift();
        if (!boss) {
            this.isAttacking = false;
            return;
        }
        this.log(`[PET BOSS] ƒêang ƒë√°nh boss: ${boss.name} | HP: ${boss.currentHp.toLocaleString()} / ${boss.maxHp.toLocaleString()}`,'attack');
        this.safeSend('personal:boss:attack', { bossId: boss.id });
        setTimeout(() => {
            this.isAttacking = false;
            this.attackNextBoss();
        }, 5000);
    }
}
async function mainPersonalPetBossAuto() {
    const apiClient = new MongTuTienAPIClient();
    let cookie = await apiClient.getCookieAuto();
            if (!cookie) {
        const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
                cookie = await new Promise(resolve => {
                    rl.question('Nh·∫≠p cookie (nuxt-session): ', (input) => {
                        rl.close();
                        resolve(input.trim());
                    });
                });
    }
    const hunter = new PersonalPetBossAutoHunter(cookie.trim(), (msg, type) => {
        if (type === 'success') console.log(msg.green);
        else if (type === 'warning') console.log(msg.yellow);
        else if (type === 'error') console.log(msg.red);
        else if (type === 'attack') console.log(msg.blue);
        else if (type === 'reward') console.log(msg.yellow);
        else console.log(msg.cyan);
    });
    global.personalPetBossHunter = hunter;
    await hunter.start();
    process.on('SIGINT', () => {
        hunter.stop();
        process.exit(0);
    });
}
class PersonalWifeBossAutoHunter {
    constructor(cookie, logFn = console.log) {
        this.cookie = cookie;
        this.log = (msg, type = 'info') => {
            const now = new Date();
            const time = now.toLocaleTimeString();
            let icon = 'üíû';
            let color = 'magenta';
            if (type === 'success') { icon = 'üü¢'; color = 'green'; }
            else if (type === 'warning') { icon = 'üü°'; color = 'yellow'; }
            else if (type === 'error') { icon = 'üî¥'; color = 'red'; }
            else if (type === 'attack') { icon = '‚öîÔ∏è'; color = 'blue'; }
            else if (type === 'reward') { icon = 'üèÜ'; color = 'yellow'; }
            let line = `[${time}] ${icon} ${msg}`;
            if (colors[color]) line = colors[color](line);
            logFn(line);
        };
        this.ws = null;
        this.hasSessionKey = false;
        this.bossList = [];
        this.isAttacking = false;
        this.attackQueue = [];
        this.userId = null;
        this.myName = null;
        this.apiClient = new MongTuTienAPIClient();
        this.listInterval = null;
    }
    async ensureCharacterName() {
        if (!this.myName) {
            const charInfo = await this.apiClient.getCharacterInfo(this.cookie);
            if (charInfo && charInfo.name) {
                this.myName = charInfo.name;
                this.log(`[AUTO] ƒê√£ l·∫•y t√™n nh√¢n v·∫≠t t·ª´ API: ${this.myName}`, 'success');
            } else {
                this.log('Kh√¥ng th·ªÉ l·∫•y t√™n nh√¢n v·∫≠t t·ª´ API!', 'warning');
            }
        }
    }
    connect() {
        return new Promise((resolve, reject) => {
            const wsUrl = 'wss://mongtutien.online/ws';
            this.ws = new WebSocket(wsUrl, {
                headers: {
                    'Cookie': `nuxt-session=${this.cookie}`
                }
            });
            this.ws.on('open', () => {
                this.log('ƒê√£ k·∫øt n·ªëi WebSocket boss ƒë·∫°o l·ªØ!', 'success');
                resolve();
            });
            this.ws.on('close', () => {
                this.log('M·∫•t k·∫øt n·ªëi WebSocket boss ƒë·∫°o l·ªØ!', 'error');
                process.exit(1);
            });
            this.ws.on('error', (err) => {
                this.log(`L·ªói WebSocket boss ƒë·∫°o l·ªØ: ${err.message}`, 'error');
                process.exit(1);
            });
            this.ws.on('message', (msg) => {
                this.handleMessage(msg);
            });
        });
    }
    safeSend(type, payload = {}) {
        if (!this.hasSessionKey) return;
        try {
            if (type === 'personal:wife:boss:list') {
                this.log('[SEND] G·ª≠i l·ªánh l·∫•y danh s√°ch boss ƒë·∫°o l·ªØ...', 'info');
            }
            const packet = encryptMessage({ type, payload });
            this.send(packet);
        } catch (err) {
            this.log(`L·ªói m√£ h√≥a: ${err.message}`, 'error');
            this.hasSessionKey = false;
        }
    }
    send(packet) {
        if (this.ws && this.ws.readyState === WebSocket.OPEN) {
            this.ws.send(packet);
        }
    }
    async start() {
        await this.ensureCharacterName();
        await this.connect();
        this.log('ƒêang ch·ªù sessionKey...', 'info');
    }
    stop() {
        if (this.ws) this.ws.close();
        if (this.listInterval) clearInterval(this.listInterval);
    }
    handleMessage(msg) {
        let data = msg;
        if (Buffer.isBuffer(msg)) {
            try {
                const str = msg.toString('utf8');
                data = JSON.parse(str);
            } catch (e) { return; }
        } else if (typeof msg === 'string') {
            try { data = JSON.parse(msg); } catch (e) { return; }
        }
        // Nh·∫≠n sessionKey
        if (data.type === 'sessionKey' && data.payload) {
            setSessionKeys(data.payload);
            this.hasSessionKey = true;
            this.log('ƒê√£ nh·∫≠n sessionKey v√† thi·∫øt l·∫≠p m√£ h√≥a!', 'success');
            // Sau khi nh·∫≠n sessionKey, g·ª≠i l·ªánh l·∫•y danh s√°ch boss ƒë·∫°o l·ªØ
            this.safeSend('personal:wife:boss:list');
            this.listInterval = setInterval(() => {
                this.safeSend('personal:wife:boss:list');
            }, 60000);
            return;
        }
        // L·∫•y userId t·ª´ online:players n·∫øu t√™n tr√πng v·ªõi myName
        if (this.myName && data.type === 'online:players' && Array.isArray(data.payload)) {
            const found = data.payload.find(u => (u.name || '').toLowerCase() === this.myName.toLowerCase());
            if (found) {
                this.userId = found.userId;
                this.log(`[AUTO] ƒê√£ l·∫•y userId t·ª´ online:players: ${this.userId} (name: ${this.myName})`, 'success');
            }
            return;
        }
        // Khi nh·∫≠n danh s√°ch boss ƒë·∫°o l·ªØ
        if (data.type === 'personal:wife:boss:list' && Array.isArray(data.payload)) {
            this.log(`[RECV] ƒê√£ nh·∫≠n danh s√°ch boss ƒë·∫°o l·ªØ (${data.payload.length} boss).`, 'info');
            this.bossList = data.payload;
            const now = Date.now();
            let readyCount = 0;
            for (const boss of this.bossList) {
                let status = '';
                if (!boss.spawnedAt || (boss.spawnedAt && new Date(boss.spawnedAt).getTime() <= now)) {
                    if (boss.currentHp > 0) {
                        status = 'C√≥ th·ªÉ t·∫•n c√¥ng';
                        readyCount++;
                    } else {
                        status = 'ƒê√£ ch·∫øt';
                    }
                } else {
                    const ms = new Date(boss.spawnedAt).getTime() - now;
                    const min = Math.floor(ms / 60000);
                    const sec = Math.floor((ms % 60000) / 1000);
                    status = `H·ªìi sinh sau ${min} ph√∫t ${sec.toString().padStart(2, '0')} gi√¢y`;
                }
                this.log(`Boss: ${boss.name} | HP: ${boss.currentHp.toLocaleString()} / ${boss.maxHp.toLocaleString()} | ${status}`,'info');
            }
            // L·ªçc boss ƒë√£ h·ªìi sinh v√† ch∆∞a ch·∫øt
            this.attackQueue = this.bossList.filter(boss => {
                const timeLeft = boss.spawnedAt ? Math.max(0, new Date(boss.spawnedAt).getTime() - now) : 0;
                return (!boss.spawnedAt || timeLeft <= 0) && boss.currentHp > 0;
            });
            if (this.attackQueue.length > 0 && !this.isAttacking) {
                this.attackNextBoss();
            } else if (this.attackQueue.length === 0) {
                this.log('Kh√¥ng c√≥ boss ƒë·∫°o l·ªØ n√†o s·∫µn s√†ng ƒë·ªÉ ƒë√°nh. Ch·ªù boss m·ªõi h·ªìi sinh...', 'info');
            }
        }
        // Khi nh·∫≠n k·∫øt qu·∫£ t·∫•n c√¥ng ho·∫∑c ph·∫ßn th∆∞·ªüng
        if (data.type === 'personal:boss:attack:success') {
            this.log('ƒê√£ t·∫•n c√¥ng boss ƒë·∫°o l·ªØ th√†nh c√¥ng!', 'success');
        }
        if (data.type === 'personal:wife:boss:reward' && data.payload) {
            let lines = [];
            lines.push('üèÜ Th∆∞·ªüng:');
            Object.entries(data.payload).forEach(([k, v]) => {
                lines.push(`  - ${k}: ${JSON.stringify(v)}`);
            });
            this.log(prettyBox('K·∫øt th√∫c Boss ƒê·∫°o L·ªØ', lines, 'green'), 'reward');
        }
        // Khi nh·∫≠n th√¥ng b√°o nh·∫≠n th∆∞·ªüng t·ª´ boss ƒë·∫°o l·ªØ (system message)
        if (data.type === 'system' && data.payload && typeof data.payload.text === 'string' && data.payload.text.includes('üéÅ T·ª´')) {
            this.log(`[TH∆Ø·ªûNG] ${data.payload.text}`, 'reward');
        }
        // Khi nh·∫≠n c·∫£nh b√°o ho·∫∑c l·ªói
        if (data.type === 'warn' && data.payload && typeof data.payload.text === 'string') {
            this.log(`‚ö†Ô∏è ${data.payload.text}`, 'warning');
        }
        if (data.error && typeof data.error === 'string') {
            this.log(`L·ªói: ${data.error}`, 'error');
        }
    }
    attackNextBoss() {
        if (this.isAttacking || !this.attackQueue || this.attackQueue.length === 0) {
            this.isAttacking = false;
            return;
        }
        this.isAttacking = true;
        const boss = this.attackQueue.shift();
        if (!boss) {
            this.isAttacking = false;
            return;
        }
        this.log(`[ƒê·∫†O L·ªÆ] ƒêang ƒë√°nh boss: ${boss.name} | HP: ${boss.currentHp.toLocaleString()} / ${boss.maxHp.toLocaleString()}`,'attack');
        this.safeSend('personal:boss:attack', { bossId: boss.id });
        setTimeout(() => {
            this.isAttacking = false;
            this.attackNextBoss();
        }, 5000);
    }
}

async function mainPersonalWifeBossAuto() {
    const apiClient = new MongTuTienAPIClient();
    let cookie = await apiClient.getCookieAuto();
    if (!cookie) {
        const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
        cookie = await new Promise(resolve => {
            rl.question('Nh·∫≠p cookie (nuxt-session): ', (input) => {
                rl.close();
                resolve(input.trim());
            });
        });
    }
    const hunter = new PersonalWifeBossAutoHunter(cookie.trim(), (msg, type) => {
        if (type === 'success') console.log(msg.green);
        else if (type === 'warning') console.log(msg.yellow);
        else if (type === 'error') console.log(msg.red);
        else if (type === 'attack') console.log(msg.blue);
        else if (type === 'reward') console.log(msg.yellow);
        else console.log(msg.magenta);
    });
    global.personalWifeBossHunter = hunter;
    await hunter.start();
    process.on('SIGINT', () => {
        hunter.stop();
        process.exit(0);
    });
}
class HeavenMineAutoCollector {
    constructor(cookie, logFn = console.log) {
        this.cookie = cookie;
        this.log = (msg, type = 'info') => {
            const now = new Date();
            const time = now.toLocaleTimeString();
            let icon = '‚õèÔ∏è';
            let color = 'cyan';
            if (type === 'success') { icon = 'üü¢'; color = 'green'; }
            else if (type === 'warning') { icon = 'üü°'; color = 'yellow'; }
            else if (type === 'error') { icon = 'üî¥'; color = 'red'; }
            else if (type === 'claim') { icon = 'üíé'; color = 'yellow'; }
            let line = `[${time}] ${icon} ${msg}`;
            if (colors[color]) line = colors[color](line);
            logFn(line);
        };
        this.ws = null;
        this.userId = null;
        this.myName = null; // S·∫Ω l·∫•y t·ª´ API
        this.mineList = [];
        this.claimInterval = null;
        this.hasSessionKey = false;
        this.pendingClaimMines = new Set();
        this.apiClient = new MongTuTienAPIClient();
        this.initialized = false;
    }
    async ensureCharacterName() {
        if (!this.myName) {
            const charInfo = await this.apiClient.getCharacterInfo(this.cookie);
            if (charInfo && charInfo.name) {
                this.myName = charInfo.name;
                this.log(`[AUTO] ƒê√£ l·∫•y t√™n nh√¢n v·∫≠t t·ª´ API: ${this.myName}`, 'success');
            } else {
                this.log('Kh√¥ng th·ªÉ l·∫•y t√™n nh√¢n v·∫≠t t·ª´ API!', 'warning');
            }
        }
    }
    async start() {
        await this.ensureCharacterName();
        await this.connect();
        this.log('ƒêang ch·ªù sessionKey...', 'info');
    }
    connect() {
        return new Promise((resolve, reject) => {
            const wsUrl = 'wss://mongtutien.online/ws';
            this.ws = new WebSocket(wsUrl, {
                headers: {
                    'Cookie': `nuxt-session=${this.cookie}`
                }
            });
            this.ws.on('open', () => {
                this.log('ƒê√£ k·∫øt n·ªëi WebSocket m·ªè!', 'success');
                resolve();
            });
            this.ws.on('close', () => {
                this.log('M·∫•t k·∫øt n·ªëi WebSocket m·ªè!', 'error');
                process.exit(1);
            });
            this.ws.on('error', (err) => {
                this.log(`L·ªói WebSocket m·ªè: ${err.message}`, 'error');
                process.exit(1);
            });
            this.ws.on('message', (msg) => {
                this.handleMessage(msg);
            });
        });
    }
    safeSend(type, payload = {}) {
        if (!this.hasSessionKey) {
            return;
        }
        try {
            const packet = encryptMessage({ type, payload });
            this.send(packet);
        } catch (err) {
            this.log(`L·ªói m√£ h√≥a: ${err.message}`, 'error');
            this.hasSessionKey = false;
        }
    }
    send(packet) {
        if (this.ws && this.ws.readyState === WebSocket.OPEN) {
            this.ws.send(packet);
        }
    }
    stop() {
        if (this.ws) this.ws.close();
        if (this.claimInterval) clearInterval(this.claimInterval);
    }
    handleMessage(msg) {
        let data = msg;
        if (Buffer.isBuffer(msg)) {
            try {
                const str = msg.toString('utf8');
                data = JSON.parse(str);
            } catch (e) { return; }
        } else if (typeof msg === 'string') {
            try { data = JSON.parse(msg); } catch (e) { return; }
        }
        // Nh·∫≠n sessionKey
        if (data.type === 'sessionKey' && data.payload) {
            setSessionKeys(data.payload);
            this.hasSessionKey = true;
            this.log('ƒê√£ nh·∫≠n sessionKey v√† thi·∫øt l·∫≠p m√£ h√≥a!', 'success');
            // G·ª≠i l·∫ßn l∆∞·ª£t c√°c l·ªánh c·∫ßn thi·∫øt ƒë·ªÉ server tr·∫£ v·ªÅ heavenmine:list
            this.safeSend('hongmong:status');
            setTimeout(() => this.safeSend('hongmong:top'), 300);
            setTimeout(() => this.safeSend('heavenmine:status'), 600);
            setTimeout(() => {
                this.safeSend('heavenmine:list');
                this.claimInterval = setInterval(() => {
                    this.safeSend('heavenmine:list');
                }, 120000);
            }, 1000);
            return;
        }
        // L·∫•y userId t·ª´ online:players n·∫øu t√™n tr√πng v·ªõi myName
        if (this.myName && data.type === 'online:players' && Array.isArray(data.payload)) {
            const found = data.payload.find(u => (u.name || '').toLowerCase() === this.myName.toLowerCase());
            if (found) {
                this.userId = found.userId;
                this.log(`[AUTO] ƒê√£ l·∫•y userId t·ª´ online:players: ${this.userId} (name: ${this.myName})`, 'success');
                // Ch·ªß ƒë·ªông g·ª≠i l·∫°i heavenmine:list ngay sau khi l·∫•y ƒë∆∞·ª£c userId
                this.pendingClaimMines.clear(); // reset tr·∫°ng th√°i pending
                this.safeSend('heavenmine:list');
            }
            return;
        }
        // Khi nh·∫≠n danh s√°ch m·ªè
        if (data.type === 'heavenmine:list' && Array.isArray(data.payload)) {
            this.mineList = data.payload;
            if (!this.myName) {
                this.log('Ch∆∞a x√°c ƒë·ªãnh ƒë∆∞·ª£c t√™n nh√¢n v·∫≠t c·ªßa b·∫°n, kh√¥ng th·ªÉ nh·∫≠n t√†i nguy√™n!', 'warning');
                return;
            }
            let mineCount = 0, claimCount = 0, waitLog = false;
            const myMines = this.mineList.filter(mine => mine.ownerId && (mine.ownerId.name || '').toLowerCase() === this.myName.toLowerCase());
            // N·∫øu c√≥ nhi·ªÅu m·ªè c√πng t√™n, log ra danh s√°ch ownerId._id ƒë·ªÉ x√°c nh·∫≠n
            if (myMines.length > 1) {
                const ids = myMines.map(m => m.ownerId._id).join(', ');
                this.log(`[C·∫¢NH B√ÅO] C√≥ nhi·ªÅu m·ªè tr√πng t√™n '${this.myName}'. C√°c ownerId._id: ${ids}`, 'warning');
            }
            for (const mine of myMines) {
                mineCount++;
                if ((mine.accumulated && (mine.accumulated.spiritStones > 0 || mine.accumulated.wifeEssence > 0)) && !this.pendingClaimMines.has(mine._id)) {
                    this.log(`M·ªè Lv${mine.level} c√≥ t√†i nguy√™n: +${mine.accumulated.spiritStones} linh th·∫°ch, +${mine.accumulated.wifeEssence} t√≠n v·∫≠t. ƒêang nh·∫≠n...`, 'claim');
                    this.safeSend('heavenmine:claim');
                    claimCount++;
                    this.pendingClaimMines.add(mine._id);
                } else if (mine.accumulated && (mine.accumulated.spiritStones > 0 || mine.accumulated.wifeEssence > 0)) {
                    waitLog = true;
                }
            }
            if (mineCount === 0) {
                this.log('Kh√¥ng c√≥ m·ªè n√†o thu·ªôc v·ªÅ b·∫°n!', 'warning');
            } else if (claimCount === 0 && waitLog) {
                this.log('C√≥ t√†i nguy√™n nh∆∞ng ch∆∞a th·ªÉ nh·∫≠n, c√≥ th·ªÉ ph·∫£i ƒë·ª£i th√™m th·ªùi gian!', 'warning');
            } else if (claimCount === 0) {
                this.log('Kh√¥ng c√≥ t√†i nguy√™n n√†o ƒë·ªÉ nh·∫≠n ·ªü c√°c m·ªè c·ªßa b·∫°n.', 'info');
            }
        }
        // Khi nh·∫≠n th√†nh c√¥ng
        if (data.type === 'heavenmine:claim:success') {
            this.log('ƒê√£ nh·∫≠n t√†i nguy√™n m·ªè th√†nh c√¥ng!', 'success');
            this.pendingClaimMines.clear();
        }
        // Khi nh·∫≠n c·∫£nh b√°o ch∆∞a ƒë·ªß th·ªùi gian t√≠ch l≈©y
        if (data.type === 'warn' && data.payload && typeof data.payload.text === 'string' && data.payload.text.includes('Ch∆∞a th·ªÉ nh·∫≠n!')) {
            this.log(`‚ö†Ô∏è ${data.payload.text}`, 'warning');
        }
        // X·ª≠ l√Ω l·ªói ch·ªØ k√Ω
        if (data.error && data.error.includes('ch·ªØ k√Ω')) {
            this.log(`L·ªói ch·ªØ k√Ω: ${data.error}`, 'error');
            this.hasSessionKey = false;
        }
        // Khi nh·∫≠n th√¥ng b√°o nh·∫≠n th∆∞·ªüng t·ª´ heavenmine (system message)
        if (data.type === 'system' && data.payload && typeof data.payload.text === 'string' && data.payload.text.includes('üéÅ T·ª´')) {
            this.log(`[TH∆Ø·ªûNG] ${data.payload.text}`, 'reward');
        }
    }
}

async function mainHeavenMineAutoCollector() {
    const apiClient = new MongTuTienAPIClient();
    let cookie = await apiClient.getCookieAuto();
    if (!cookie) {
    const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
        cookie = await new Promise(resolve => {
            rl.question('Nh·∫≠p cookie (nuxt-session): ', (input) => {
            rl.close();
                resolve(input.trim());
            });
        });
    }
    const collector = new HeavenMineAutoCollector(cookie.trim(), (msg, type) => {
        if (type === 'success') console.log(msg.green);
        else if (type === 'warning') console.log(msg.yellow);
        else if (type === 'error') console.log(msg.red);
        else if (type === 'claim') console.log(msg.yellow);
        else console.log(msg.cyan);
    });
    global.heavenMineCollector = collector;
    await collector.start();
    process.on('SIGINT', () => {
        collector.stop();
        process.exit(0);
    });
}
// ===================== MULTI FEATURE WS CLIENT =====================
class MultiFeatureWebSocketClient {
    constructor(cookie, features = {}) {
        this.cookie = cookie;
        this.ws = null;
        this.hasSessionKey = false;
        this.handlers = [];
        this.features = features; // { heavenmine: true, personalBoss: true, petBoss: true, wifeBoss: true }
        this.sessionKeys = null;
    }
    registerHandler(handler) {
        this.handlers.push(handler);
        handler.setClient(this);
    }
    connect() {
        return new Promise((resolve, reject) => {
            const wsUrl = 'wss://mongtutien.online/ws';
            this.ws = new WebSocket(wsUrl, {
                headers: {
                    'Cookie': `nuxt-session=${this.cookie}`
                }
            });
            this.ws.on('open', () => {
                this.log('ƒê√£ k·∫øt n·ªëi WebSocket ƒëa ch·ª©c nƒÉng!', 'success');
                resolve();
            });
            this.ws.on('close', () => {
                this.log('M·∫•t k·∫øt n·ªëi WebSocket!', 'error');
                process.exit(1);
            });
            this.ws.on('error', (err) => {
                this.log(`L·ªói WebSocket: ${err.message}`, 'error');
                process.exit(1);
            });
            this.ws.on('message', (msg) => {
                this.handleMessage(msg);
            });
        });
    }
    log(msg, type = 'info') {
        const now = new Date();
        const time = now.toLocaleTimeString();
        let icon = 'üåê';
        let color = 'cyan';
        if (type === 'success') { icon = 'üü¢'; color = 'green'; }
        else if (type === 'warning') { icon = 'üü°'; color = 'yellow'; }
        else if (type === 'error') { icon = 'üî¥'; color = 'red'; }
        let line = `[${time}] ${icon} ${msg}`;
        if (colors[color]) line = colors[color](line);
        console.log(line);
    }
    send(packet) {
        if (this.ws && this.ws.readyState === WebSocket.OPEN) {
            this.ws.send(packet);
        }
    }
    safeSend(type, payload = {}) {
        if (!this.hasSessionKey) return;
        try {
            const packet = encryptMessage({ type, payload });
            this.send(packet);
        } catch (err) {
            this.log(`L·ªói m√£ h√≥a: ${err.message}`, 'error');
            this.hasSessionKey = false;
        }
    }
    handleMessage(msg) {
        let data = msg;
        if (Buffer.isBuffer(msg)) {
            try {
                const str = msg.toString('utf8');
                data = JSON.parse(str);
            } catch (e) { return; }
        } else if (typeof msg === 'string') {
            try { data = JSON.parse(msg); } catch (e) { return; }
        }
        // X·ª≠ l√Ω sessionKey chung
        if (data.type === 'sessionKey' && data.payload) {
            setSessionKeys(data.payload);
            this.hasSessionKey = true;
            this.sessionKeys = data.payload;
            this.log('ƒê√£ nh·∫≠n sessionKey v√† thi·∫øt l·∫≠p m√£ h√≥a!', 'success');
            // G·ªçi onSessionReady cho t·ª´ng handler
            for (const h of this.handlers) {
                if (typeof h.onSessionReady === 'function') h.onSessionReady();
            }
            return;
        }
        // Ph√¢n ph·ªëi message cho t·ª´ng handler
        for (const h of this.handlers) {
            if (typeof h.handleMessage === 'function') h.handleMessage(data);
        }
    }
}
// ==== V√≠ d·ª• handler cho m·ªè ====
class HeavenMineHandler {
    constructor() {
        this.client = null;
        this.myName = null;
        this.mineList = [];
        this.claimInterval = null;
        this.apiClient = new MongTuTienAPIClient();
        this.initialized = false;
        this.errorCount = 0;
    }
    setClient(client) { this.client = client; }
    async ensureCharacterName() {
        if (!this.myName) {
            const charInfo = await this.apiClient.getCharacterInfo(this.client.cookie);
            if (charInfo && charInfo.name) {
                this.myName = charInfo.name;
                this.client.log(`[AUTO] ƒê√£ l·∫•y t√™n nh√¢n v·∫≠t t·ª´ API: ${this.myName}`, 'success');
                } else {
                this.client.log('Kh√¥ng th·ªÉ l·∫•y t√™n nh√¢n v·∫≠t t·ª´ API!', 'warning');
            }
        }
    }
    async onSessionReady() {
        if (!this.initialized) {
            await this.ensureCharacterName();
            this.initialized = true;
        }
        this.startLoop();
    }
    startLoop() {
        const doListAndClaim = () => {
            this.client.safeSend('hongmong:status');
            setTimeout(() => this.client.safeSend('hongmong:top'), 300);
            setTimeout(() => this.client.safeSend('heavenmine:status'), 600);
            setTimeout(() => {
                this.client.safeSend('heavenmine:list');
                this.client.log('[SEND] G·ª≠i l·ªánh l·∫•y danh s√°ch m·ªè...', 'info');
            }, 1000);
        };
        doListAndClaim();
        this.claimInterval = setInterval(doListAndClaim, 120000);
    }
    async handleMessage(data) {
        // X·ª≠ l√Ω l·ªói x√°c th·ª±c
        if (data.error && (data.error.includes('cookie') || data.error.includes('x√°c th·ª±c') || data.error.includes('401'))) {
            this.errorCount++;
            if (this.errorCount > 3) {
                this.client.log('L·ªói x√°c th·ª±c qu√° nhi·ªÅu l·∫ßn, d·ª´ng ch·ª©c nƒÉng m·ªè.', 'error');
                if (this.claimInterval) clearInterval(this.claimInterval);
                return;
            }
            this.client.log('L·ªói x√°c th·ª±c, ƒëang l·∫•y l·∫°i cookie...', 'warning');
            const newCookie = await getCookieAutoShared();
            if (newCookie) {
                this.client.cookie = newCookie;
                this.apiClient.cookie = newCookie;
                this.errorCount = 0;
                this.client.log('ƒê√£ l·∫•y l·∫°i cookie m·ªõi, ti·∫øp t·ª•c...', 'success');
                // G·ª≠i l·∫°i l·ªánh l·∫•y danh s√°ch m·ªè
                this.client.safeSend('heavenmine:list');
                            } else {
                this.client.log('Kh√¥ng l·∫•y l·∫°i ƒë∆∞·ª£c cookie m·ªõi.', 'error');
            }
            return;
        }
        if (data.type === 'heavenmine:list' && Array.isArray(data.payload)) {
            this.mineList = data.payload;
            const myMines = this.mineList.filter(mine =>
                mine.ownerId && (mine.ownerId.name || '').toLowerCase() === (this.myName || '').toLowerCase()
            );
            this.client.log(`[RECV] ƒê√£ nh·∫≠n danh s√°ch m·ªè c·ªßa b·∫°n (${myMines.length} m·ªè).`, 'info');
            let claimMines = myMines.filter(mine =>
                mine.accumulated && (mine.accumulated.spiritStones > 0 || mine.accumulated.wifeEssence > 0)
            );
            if (myMines.length === 0) {
                this.client.log('Kh√¥ng c√≥ m·ªè n√†o thu·ªôc v·ªÅ b·∫°n!', 'warning');
            } else if (claimMines.length === 0) {
                this.client.log('Kh√¥ng c√≥ t√†i nguy√™n n√†o ƒë·ªÉ nh·∫≠n ·ªü c√°c m·ªè c·ªßa b·∫°n.', 'info');
            } else {
                this.client.log(`S·∫Ω nh·∫≠n t√†i nguy√™n ·ªü ${claimMines.length} m·ªè sau 2 gi√¢y...`, 'info');
                setTimeout(() => {
                    for (const mine of claimMines) {
                        let info = `M·ªè Lv${mine.level} | +${mine.accumulated.spiritStones} linh th·∫°ch, +${mine.accumulated.wifeEssence} t√≠n v·∫≠t. ƒêang nh·∫≠n...`;
                        this.client.log(info, 'claim');
                        this.client.safeSend('heavenmine:claim');
                    }
                }, 2000);
            }
        }
        if (data.type === 'heavenmine:claim:success') {
            this.client.log('ƒê√£ nh·∫≠n t√†i nguy√™n m·ªè th√†nh c√¥ng!', 'success');
        }
        if (data.type === 'warn' && data.payload && typeof data.payload.text === 'string' && data.payload.text.includes('Ch∆∞a th·ªÉ nh·∫≠n!')) {
            this.client.log(`‚ö†Ô∏è ${data.payload.text}`, 'warning');
        }
        if (data.type === 'system' && data.payload && typeof data.payload.text === 'string' && data.payload.text.includes('üéÅ T·ª´')) {
            this.client.log(`[TH∆Ø·ªûNG] ${data.payload.text}`, 'reward');
        }
    }
}

// ==== V√≠ d·ª• handler cho boss c√° nh√¢n ====
class PersonalBossHandler {
    constructor() {
        this.client = null;
        this.userId = null;
        this.bossList = [];
        this.attackQueue = [];
        this.isAttacking = false;
        this.listInterval = null;
        this.errorCount = 0;
    }
    setClient(client) { this.client = client; }
    onSessionReady() {
        this.client.safeSend('personal:boss:list');
        this.client.log('[SEND] G·ª≠i l·ªánh l·∫•y danh s√°ch boss c√° nh√¢n...', 'info');
        this.listInterval = setInterval(() => {
            this.client.safeSend('personal:boss:list');
            this.client.log('[SEND] G·ª≠i l·ªánh l·∫•y danh s√°ch boss c√° nh√¢n...', 'info');
        }, 60000);
    }
    async handleMessage(data) {
        // X·ª≠ l√Ω l·ªói x√°c th·ª±c
        if (data.error && (data.error.includes('cookie') || data.error.includes('x√°c th·ª±c') || data.error.includes('401'))) {
            this.errorCount++;
            if (this.errorCount > 3) {
                this.client.log('L·ªói x√°c th·ª±c qu√° nhi·ªÅu l·∫ßn, d·ª´ng ch·ª©c nƒÉng boss c√° nh√¢n.', 'error');
                if (this.listInterval) clearInterval(this.listInterval);
                return;
            }
            this.client.log('L·ªói x√°c th·ª±c, ƒëang l·∫•y l·∫°i cookie...', 'warning');
            const newCookie = await getCookieAutoShared();
            if (newCookie) {
                this.client.cookie = newCookie;
                this.errorCount = 0;
                this.client.log('ƒê√£ l·∫•y l·∫°i cookie m·ªõi, ti·∫øp t·ª•c...', 'success');
                this.client.safeSend('personal:boss:list');
                        } else {
                this.client.log('Kh√¥ng l·∫•y l·∫°i ƒë∆∞·ª£c cookie m·ªõi.', 'error');
            }
                            return;
                        }
        if (data.type === 'personal:boss:list' && Array.isArray(data.payload)) {
            this.client.log(`[RECV] ƒê√£ nh·∫≠n danh s√°ch boss c√° nh√¢n (${data.payload.length} boss).`, 'info');
            this.bossList = data.payload;
            const now = Date.now();
            for (const boss of this.bossList) {
                let status = '';
                if (!boss.spawnedAt || (boss.spawnedAt && new Date(boss.spawnedAt).getTime() <= now)) {
                    if (boss.currentHp > 0) {
                        status = 'C√≥ th·ªÉ t·∫•n c√¥ng';
                    } else {
                        status = 'ƒê√£ ch·∫øt';
                    }
                } else {
                    const ms = new Date(boss.spawnedAt).getTime() - now;
                    const min = Math.floor(ms / 60000);
                    const sec = Math.floor((ms % 60000) / 1000);
                    status = `H·ªìi sinh sau ${min} ph√∫t ${sec.toString().padStart(2, '0')} gi√¢y`;
                }
                this.client.log(`PersonalBoss: ${boss.name} | HP: ${boss.currentHp.toLocaleString()} / ${boss.maxHp.toLocaleString()} | ${status}`,'info');
            }
            // L·ªçc boss ƒë√£ h·ªìi sinh v√† ch∆∞a ch·∫øt
            this.attackQueue = this.bossList.filter(boss => {
                const timeLeft = boss.spawnedAt ? Math.max(0, new Date(boss.spawnedAt).getTime() - now) : 0;
                return (!boss.spawnedAt || timeLeft <= 0) && boss.currentHp > 0;
            });
            if (this.attackQueue.length > 0 && !this.isAttacking) {
                this.attackNextBoss();
            } else if (this.attackQueue.length === 0) {
                this.client.log('Kh√¥ng c√≥ boss c√° nh√¢n n√†o s·∫µn s√†ng ƒë·ªÉ ƒë√°nh. Ch·ªù boss m·ªõi h·ªìi sinh...', 'info');
            }
        }
        if (data.type === 'system' && data.payload && typeof data.payload.text === 'string' && data.payload.text.includes('üéÅ T·ª´')) {
            this.client.log(`[TH∆Ø·ªûNG] ${data.payload.text}`, 'reward');
        }
    }
    attackNextBoss() {
        if (this.isAttacking || !this.attackQueue || this.attackQueue.length === 0) {
            this.isAttacking = false;
            return;
        }
        this.isAttacking = true;
        const boss = this.attackQueue.shift();
        if (!boss) {
            this.isAttacking = false;
            return;
        }
        this.client.log(`[SEND] G·ª≠i l·ªánh t·∫•n c√¥ng boss c√° nh√¢n: ${boss.name} (ID: ${boss.id})`,'attack');
        this.client.safeSend('personal:boss:attack', { bossId: boss.id });
        setTimeout(() => {
            this.isAttacking = false;
            this.attackNextBoss();
        }, 5000);
    }
}

// ==== Handler cho boss pet ====
class PetBossHandler {
    constructor() {
        this.client = null;
        this.userId = null;
        this.bossList = [];
        this.attackQueue = [];
        this.isAttacking = false;
        this.listInterval = null;
        this.errorCount = 0;
    }
    setClient(client) { this.client = client; }
    onSessionReady() {
        this.client.safeSend('personal:pet:boss:list');
        this.listInterval = setInterval(() => {
            this.client.safeSend('personal:pet:boss:list');
        }, 60000);
    }
    async handleMessage(data) {
        // X·ª≠ l√Ω l·ªói x√°c th·ª±c
        if (data.error && (data.error.includes('cookie') || data.error.includes('x√°c th·ª±c') || data.error.includes('401'))) {
            this.errorCount++;
            if (this.errorCount > 3) {
                this.client.log('L·ªói x√°c th·ª±c qu√° nhi·ªÅu l·∫ßn, d·ª´ng ch·ª©c nƒÉng boss pet.', 'error');
                if (this.listInterval) clearInterval(this.listInterval);
                return;
            }
            this.client.log('L·ªói x√°c th·ª±c, ƒëang l·∫•y l·∫°i cookie...', 'warning');
            const newCookie = await getCookieAutoShared();
            if (newCookie) {
                this.client.cookie = newCookie;
                this.errorCount = 0;
                this.client.log('ƒê√£ l·∫•y l·∫°i cookie m·ªõi, ti·∫øp t·ª•c...', 'success');
                this.client.safeSend('personal:pet:boss:list');
        } else {
                this.client.log('Kh√¥ng l·∫•y l·∫°i ƒë∆∞·ª£c cookie m·ªõi.', 'error');
            }
            return;
        }
        if (data.type === 'personal:pet:boss:list' && Array.isArray(data.payload)) {
            this.client.log(`[RECV] ƒê√£ nh·∫≠n danh s√°ch boss pet c√° nh√¢n (${data.payload.length} boss).`, 'info');
            this.bossList = data.payload;
            const now = Date.now();
            for (const boss of this.bossList) {
                let status = '';
                if (!boss.spawnedAt || (boss.spawnedAt && new Date(boss.spawnedAt).getTime() <= now)) {
                    if (boss.currentHp > 0) {
                        status = 'C√≥ th·ªÉ t·∫•n c√¥ng';
                    } else {
                        status = 'ƒê√£ ch·∫øt';
                    }
                } else {
                    const ms = new Date(boss.spawnedAt).getTime() - now;
                    const min = Math.floor(ms / 60000);
                    const sec = Math.floor((ms % 60000) / 1000);
                    status = `H·ªìi sinh sau ${min} ph√∫t ${sec.toString().padStart(2, '0')} gi√¢y`;
                }
                this.client.log(`PetBoss: ${boss.name} | HP: ${boss.currentHp.toLocaleString()} / ${boss.maxHp.toLocaleString()} | ${status}`,'info');
            }
            // L·ªçc boss ƒë√£ h·ªìi sinh v√† ch∆∞a ch·∫øt
            this.attackQueue = this.bossList.filter(boss => {
                const timeLeft = boss.spawnedAt ? Math.max(0, new Date(boss.spawnedAt).getTime() - now) : 0;
                return (!boss.spawnedAt || timeLeft <= 0) && boss.currentHp > 0;
            });
            if (this.attackQueue.length > 0 && !this.isAttacking) {
                this.attackNextBoss();
            } else if (this.attackQueue.length === 0) {
                this.client.log('Kh√¥ng c√≥ boss pet c√° nh√¢n n√†o s·∫µn s√†ng ƒë·ªÉ ƒë√°nh. Ch·ªù boss m·ªõi h·ªìi sinh...', 'info');
            }
        }
        if (data.type === 'system' && data.payload && typeof data.payload.text === 'string' && data.payload.text.includes('üéÅ T·ª´')) {
            this.client.log(`[TH∆Ø·ªûNG] ${data.payload.text}`, 'reward');
        }
    }
    attackNextBoss() {
        if (this.isAttacking || !this.attackQueue || this.attackQueue.length === 0) {
            this.isAttacking = false;
            return;
        }
        this.isAttacking = true;
        const boss = this.attackQueue.shift();
        if (!boss) {
            this.isAttacking = false;
            return;
        }
        this.client.log(`[SEND] G·ª≠i l·ªánh t·∫•n c√¥ng boss pet c√° nh√¢n: ${boss.name} (ID: ${boss.id})`,'attack');
        this.client.safeSend('personal:boss:attack', { bossId: boss.id });
        setTimeout(() => {
            this.isAttacking = false;
            this.attackNextBoss();
        }, 5000);
    }
}

// ==== Handler cho boss ƒë·∫°o l·ªØ ====
class WifeBossHandler {
    constructor() {
        this.client = null;
        this.userId = null;
        this.bossList = [];
        this.attackQueue = [];
        this.isAttacking = false;
        this.listInterval = null;
        this.errorCount = 0;
    }
    setClient(client) { this.client = client; }
    onSessionReady() {
        this.client.safeSend('personal:wife:boss:list');
        this.listInterval = setInterval(() => {
            this.client.safeSend('personal:wife:boss:list');
        }, 60000);
    }
    async handleMessage(data) {
        // X·ª≠ l√Ω l·ªói x√°c th·ª±c
        if (data.error && (data.error.includes('cookie') || data.error.includes('x√°c th·ª±c') || data.error.includes('401'))) {
            this.errorCount++;
            if (this.errorCount > 3) {
                this.client.log('L·ªói x√°c th·ª±c qu√° nhi·ªÅu l·∫ßn, d·ª´ng ch·ª©c nƒÉng boss ƒë·∫°o l·ªØ.', 'error');
                if (this.listInterval) clearInterval(this.listInterval);
                return;
            }
            this.client.log('L·ªói x√°c th·ª±c, ƒëang l·∫•y l·∫°i cookie...', 'warning');
            const newCookie = await getCookieAutoShared();
            if (newCookie) {
                this.client.cookie = newCookie;
                this.errorCount = 0;
                this.client.log('ƒê√£ l·∫•y l·∫°i cookie m·ªõi, ti·∫øp t·ª•c...', 'success');
                this.client.safeSend('personal:wife:boss:list');
            } else {
                this.client.log('Kh√¥ng l·∫•y l·∫°i ƒë∆∞·ª£c cookie m·ªõi.', 'error');
            }
            return;
        }
        if (data.type === 'personal:wife:boss:list' && Array.isArray(data.payload)) {
            this.client.log(`[RECV] ƒê√£ nh·∫≠n danh s√°ch boss ƒë·∫°o l·ªØ (${data.payload.length} boss).`, 'info');
            this.bossList = data.payload;
            const now = Date.now();
            for (const boss of this.bossList) {
                let status = '';
                if (!boss.spawnedAt || (boss.spawnedAt && new Date(boss.spawnedAt).getTime() <= now)) {
                    if (boss.currentHp > 0) {
                        status = 'C√≥ th·ªÉ t·∫•n c√¥ng';
                    } else {
                        status = 'ƒê√£ ch·∫øt';
                    }
                } else {
                    const ms = new Date(boss.spawnedAt).getTime() - now;
                    const min = Math.floor(ms / 60000);
                    const sec = Math.floor((ms % 60000) / 1000);
                    status = `H·ªìi sinh sau ${min} ph√∫t ${sec.toString().padStart(2, '0')} gi√¢y`;
                }
                this.client.log(`WifeBoss: ${boss.name} | HP: ${boss.currentHp.toLocaleString()} / ${boss.maxHp.toLocaleString()} | ${status}`,'info');
            }
            // L·ªçc boss ƒë√£ h·ªìi sinh v√† ch∆∞a ch·∫øt
            this.attackQueue = this.bossList.filter(boss => {
                const timeLeft = boss.spawnedAt ? Math.max(0, new Date(boss.spawnedAt).getTime() - now) : 0;
                return (!boss.spawnedAt || timeLeft <= 0) && boss.currentHp > 0;
            });
            if (this.attackQueue.length > 0 && !this.isAttacking) {
                this.attackNextBoss();
            } else if (this.attackQueue.length === 0) {
                this.client.log('Kh√¥ng c√≥ boss ƒë·∫°o l·ªØ n√†o s·∫µn s√†ng ƒë·ªÉ ƒë√°nh. Ch·ªù boss m·ªõi h·ªìi sinh...', 'info');
            }
        }
        if (data.type === 'system' && data.payload && typeof data.payload.text === 'string' && data.payload.text.includes('üéÅ T·ª´')) {
            this.client.log(`[TH∆Ø·ªûNG] ${data.payload.text}`, 'reward');
        }
    }
    attackNextBoss() {
        if (this.isAttacking || !this.attackQueue || this.attackQueue.length === 0) {
            this.isAttacking = false;
            return;
        }
        this.isAttacking = true;
        const boss = this.attackQueue.shift();
        if (!boss) {
            this.isAttacking = false;
            return;
        }
        this.client.log(`[SEND] G·ª≠i l·ªánh t·∫•n c√¥ng boss ƒë·∫°o l·ªØ: ${boss.name} (ID: ${boss.id})`,'attack');
        this.client.safeSend('personal:boss:attack', { bossId: boss.id });
        setTimeout(() => {
            this.isAttacking = false;
            this.attackNextBoss();
        }, 5000);
    }
}
// ==== Menu ch·ªçn nhi·ªÅu ch·ª©c nƒÉng (giao di·ªán ƒë·∫πp, r√µ r√†ng) ====
async function mainMultiFeatureWS() {
    const apiClient = new MongTuTienAPIClient();
    let cookie = await apiClient.getCookieAuto();
    if (!cookie) {
        const rl = require('readline').createInterface({ input: process.stdin, output: process.stdout });
        cookie = await new Promise(resolve => {
            rl.question('Nh·∫≠p cookie (nuxt-session): ', (input) => {
                rl.close();
                resolve(input.trim());
            });
        });
    }
    // Hi·ªÉn th·ªã menu ƒë·∫πp
    const menuLines = [
        '1. Thu th·∫≠p m·ªè',
        '2. ƒê√°nh boss c√° nh√¢n',
        '3. ƒê√°nh boss pet',
        '4. ƒê√°nh boss ƒë·∫°o l·ªØ',
        '5. ƒê√°nh th√°p',
        '',
        'Nh·∫≠p nhi·ªÅu s·ªë, c√°ch nhau b·ªüi d·∫•u ph·∫©y (vd: 1,2,3):'
    ];
    console.log(prettyBox('CH·ªåN CH·ª®C NƒÇNG WS ƒêA NHI·ªÜM', menuLines, 'cyan'));
    const rl = require('readline').createInterface({ input: process.stdin, output: process.stdout });
    rl.question('Ch·ªçn ch·ª©c nƒÉng: ', async (answer) => {
        const choices = answer.split(',').map(s => s.trim()).filter(Boolean);
        if (choices.length === 0) {
            console.log(colors.red('B·∫°n ch∆∞a ch·ªçn ch·ª©c nƒÉng n√†o!'));
            rl.close();
            return mainMultiFeatureWS();
        }
        // Hi·ªÉn th·ªã l·∫°i x√°c nh·∫≠n l·ª±a ch·ªçn (b·ªè x√°c nh·∫≠n y/n, ch·∫°y lu√¥n)
        const features = {
            heavenmine: choices.includes('1'),
            personalBoss: choices.includes('2'),
            petBoss: choices.includes('3'),
            wifeBoss: choices.includes('4'),
            tower: choices.includes('5')
        };
        const featuresMap = {
            '1': 'Thu th·∫≠p m·ªè',
            '2': 'ƒê√°nh boss c√° nh√¢n',
            '3': 'ƒê√°nh boss pet',
            '4': 'ƒê√°nh boss ƒë·∫°o l·ªØ',
            '5': 'ƒê√°nh th√°p'
        };
        const selected = choices.map(c => featuresMap[c] || c).join(', ');
        console.log(prettyBox('ƒêANG CH·∫†Y', [selected], 'green'));
        rl.close();
        const client = new MultiFeatureWebSocketClient(cookie, features);
        if (features.heavenmine) client.registerHandler(new HeavenMineHandler());
        if (features.personalBoss) client.registerHandler(new PersonalBossHandler());
        if (features.petBoss) client.registerHandler(new PetBossHandler());
        if (features.wifeBoss) client.registerHandler(new WifeBossHandler());
        if (features.tower) client.registerHandler(new TowerHandler());
        await client.connect();
        process.on('SIGINT', () => {
            if (client.ws) client.ws.close();
            process.exit(0);
        });
    });
}

// ====== ƒêo·∫°n th·ª±c thi m·∫´u ƒë·ªÉ ch·∫°y ƒë·ªôc l·∫≠p ======
if (require.main === module) {
    (async () => {
        const apiClient = new MongTuTienAPIClient();
        let cookie = await apiClient.getCookieAuto();
        if (!cookie) {
            const rl = require('readline').createInterface({ input: process.stdin, output: process.stdout });
            cookie = await new Promise(resolve => {
                rl.question('Nh·∫≠p cookie (nuxt-session): ', (input) => {
                    rl.close();
                    resolve(input.trim());
                });
            });
        }
        // T·ª± ƒë·ªông ch·ªçn t·∫•t c·∫£ c√°c ch·ª©c nƒÉng 1,2,3,4,5
        const features = {
            heavenmine: true,
            personalBoss: true,
            petBoss: true,
            wifeBoss: true,
            tower: true
        };
        const client = new MultiFeatureWebSocketClient(cookie, features);
        client.registerHandler(new HeavenMineHandler());
        client.registerHandler(new PersonalBossHandler());
        client.registerHandler(new PetBossHandler());
        client.registerHandler(new WifeBossHandler());
        client.registerHandler(new TowerHandler());
        await client.connect();
        process.on('SIGINT', () => {
            if (client.ws) client.ws.close();
            process.exit(0);
        });
    })();
} 

class TowerHandler {
    constructor() {
        this.client = null;
        this.currentFloor = 1;
        this.isChallenging = false;
        this.infoInterval = null;
        this.challengeTimeout = null;
        this.errorCount = 0;
    }
    setClient(client) { this.client = client; }
    onSessionReady() {
        this.client.safeSend('tower:info', {});
        this.client.safeSend('tower:ranking', {});
        this.infoInterval = setInterval(() => {
            this.client.safeSend('tower:info', {});
            this.client.safeSend('tower:ranking', {});
        }, 60000);
    }
    async handleMessage(data) {
        // X·ª≠ l√Ω l·ªói x√°c th·ª±c
        if (data.error && (data.error.includes('cookie') || data.error.includes('x√°c th·ª±c') || data.error.includes('401'))) {
            this.errorCount++;
            if (this.errorCount > 3) {
                this.client.log('L·ªói x√°c th·ª±c qu√° nhi·ªÅu l·∫ßn, d·ª´ng ch·ª©c nƒÉng th√°p.', 'error');
                if (this.infoInterval) clearInterval(this.infoInterval);
                if (this.challengeTimeout) clearTimeout(this.challengeTimeout);
                return;
            }
            this.client.log('L·ªói x√°c th·ª±c, ƒëang l·∫•y l·∫°i cookie...', 'warning');
            const newCookie = await getCookieAutoShared && await getCookieAutoShared();
            if (newCookie) {
                this.client.cookie = newCookie;
                this.errorCount = 0;
                this.client.log('ƒê√£ l·∫•y l·∫°i cookie m·ªõi, ti·∫øp t·ª•c...', 'success');
                this.client.safeSend('tower:info', {});
            } else {
                this.client.log('Kh√¥ng l·∫•y l·∫°i ƒë∆∞·ª£c cookie m·ªõi.', 'error');
            }
            return;
        }
        if (data.type === 'tower:info' && data.payload && data.payload.floor) {
            const floor = data.payload.floor;
            const monster = data.payload.monster;
            this.currentFloor = floor;
            this.client.log(`[TH√ÅP] T·∫ßng ${floor} - G·∫∑p ${monster ? monster.name : '???'}`,'info');
            if (!this.isChallenging) {
                this.challengeFloor(floor);
            }
        }
        if (data.type === 'tower:ranking' && Array.isArray(data.payload)) {
            this.client.log(`[TH√ÅP] Top 10 x·∫øp h·∫°ng th√°p:`, 'info');
            data.payload.slice(0, 10).forEach((item, idx) => {
                this.client.log(`  #${idx+1}: ${item.name || '·∫®n danh'} (Lv${item.level || '?'}, ${item.realm || '?'})`, 'info');
            });
        }
        if (data.type === 'log' && Array.isArray(data.payload)) {
            data.payload.filter(l => l.type === 'tower').forEach(l => {
                const clean = this.cleanTowerLog(l.text);
                if (clean) this.client.log(`[TH√ÅP] ${clean}`, this.highlightType(clean));
            });
        }
    }
    challengeFloor(floor) {
        this.isChallenging = true;
        this.client.log(`[TH√ÅP] G·ª≠i l·ªánh khi√™u chi·∫øn t·∫ßng ${floor}...`, 'attack');
        this.client.safeSend('tower:challenge', { floor });
        if (this.challengeTimeout) clearTimeout(this.challengeTimeout);
        this.challengeTimeout = setTimeout(() => {
            this.isChallenging = false;
            this.client.safeSend('tower:info', {});
        }, 15000); // 15s m·ªói l·∫ßn
    }
    // L·ªçc v√† l√†m ƒë·∫πp log th√°p
    cleanTowerLog(html) {
        if (!html) return '';
        // Lo·∫°i b·ªè th·∫ª img, div, span, b, i, class, style, ch·ªâ gi·ªØ text
        let text = html
            .replace(/<img[^>]*>/g, '')
            .replace(/<div[^>]*>/g, '')
            .replace(/<span[^>]*>/g, '')
            .replace(/<b[^>]*>/g, '')
            .replace(/<i[^>]*>/g, '')
            .replace(/<[^>]+>/g, '')
            .replace(/\s+/g, ' ')
            .trim();
        // L√†m n·ªïi b·∫≠t c√°c s·ª± ki·ªán quan tr·ªçng
        text = text.replace(/(CH√ç M·∫†NG!|ƒê√íN HI·ªÇM!|V∆∞·ª£t t·∫ßng|th√†nh c√¥ng tr·∫•n √°p|h·∫•p th·ª• [\d,\.]+ sinh l·ª±c|h·ªìi ph·ª•c [\d,\.]+ ƒëi·ªÉm|c∆∞·ªõp ƒëo·∫°t [\d,\.]+ sinh l·ª±c)/g, (m) => m.toUpperCase());
        return text;
    }
    // X√°c ƒë·ªãnh lo·∫°i log ƒë·ªÉ ƒë·ªïi m√†u
    highlightType(text) {
        if (/CH√ç M·∫†NG|ƒê√íN HI·ªÇM|tr·∫•n √°p|V∆Ø·ª¢T T·∫¶NG|th√†nh c√¥ng/.test(text)) return 'success';
        if (/h·∫•p th·ª•|h·ªìi ph·ª•c|c∆∞·ªõp ƒëo·∫°t/.test(text)) return 'reward';
        if (/n√© tr√°nh|tr√°nh ƒë∆∞·ª£c|h√≥a gi·∫£i|kh√¥ng g√¢y s√°t th∆∞∆°ng|ra ƒë√≤n h·ª•t/.test(text)) return 'warning';
        return 'info';
    }
} 